// dain implemented with ncnn library

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (binding = 0) readonly buffer flow_blob { sfp flow_blob_data[]; };
layout (binding = 1) readonly buffer depth_blob { sfp depth_blob_data[]; };
layout (binding = 2) buffer top_blob { sfp top_blob_data[]; };
layout (binding = 3) buffer count_blob { sfp count_blob_data[]; };

layout (push_constant) uniform parameter
{
    int w;
    int h;
    int c;
    int cstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.w || gy >= p.h || gz >= 1)
        return;

    afp depth = buffer_ld1(depth_blob_data, gy * p.w + gx);

    afp vx = afp(0.f);
    afp vy = afp(0.f);
    afp count = afp(0.f);

    // TODO try smaller range
    for (int y = max(0, gy - 29); y < min(p.h, gy + 30); y++)
    {
        for (int x = max(0, gx - 29); x < min(p.w, gx + 30); x++)
        {
            afp flow_x = buffer_ld1(flow_blob_data, y * p.w + x);
            afp flow_y = buffer_ld1(flow_blob_data, p.cstep + y * p.w + x);

            afp sample_x = afp(x) + flow_x;
            afp sample_y = afp(y) + flow_y;

            int x0 = int(floor(sample_x));
            int y0 = int(floor(sample_y));
            int x1 = x0 + 1;
            int y1 = y0 + 1;

            if (gx >= x0 && gx <= x1 && gy >= y0 && gy <= y1)
            {
                vx -= flow_x * depth;
                vy -= flow_y * depth;
                count += depth;
            }
        }
    }

    if (count > afp(0.f))
    {
        vx /= count;
        vy /= count;
    }

    buffer_st1(top_blob_data, gy * p.w + gx, vx);
    buffer_st1(top_blob_data, p.cstep + gy * p.w + gx, vy);
    buffer_st1(count_blob_data, gy * p.w + gx, count);
}
